SQL> 
SQL> -- --------------------------------------------------------
SQL> --  Step #1 : Merge statement to the rental table.
SQL> -- --------------------------------------------------------
SQL> 
SQL> -- Count rentals before insert.
SQL> SELECT   COUNT(*) AS "Rental before count"
  2  FROM     rental;

Rental before count                                                                                
-------------------                                                                                
                  8                                                                                

1 row selected.

SQL> 
SQL> -- Merge transaction data into rental table.
SQL> MERGE INTO rental target
  2  USING ( SELECT   DISTINCT
  3  		      r.rental_id
  4  	     ,	      c.contact_id
  5  	     ,	      tu.check_out_date AS check_out_date
  6  	     ,	      tu.return_date AS return_date
  7  	     ,	      1001 AS created_by
  8  	     ,	      TRUNC(SYSDATE) AS creation_date
  9  	     ,	      1001 AS last_updated_by
 10  	     ,	      TRUNC(SYSDATE) AS last_update_date
 11  	     FROM     member m INNER JOIN contact c
 12  	     ON       m.member_id = c.member_id INNER JOIN transaction_upload tu
 13  	     ON       c.first_name = tu.first_name
 14  	     AND      NVL(c.middle_name,'x') = NVL(tu.middle_name,'x')
 15  	     AND      c.last_name = tu.last_name LEFT JOIN rental r
 16  	     ON       c.contact_id = r.customer_id
 17  	     AND      TRUNC(tu.check_out_date) = TRUNC(r.check_out_date)
 18  	     AND      TRUNC(tu.return_date) = TRUNC(r.return_date) ) source
 19  ON (target.rental_id = source.rental_id)
 20  WHEN MATCHED THEN
 21  UPDATE SET last_updated_by = source.last_updated_by
 22  ,		last_update_date = source.last_update_date
 23  WHEN NOT MATCHED THEN
 24  INSERT VALUES
 25  ( rental_s1.NEXTVAL
 26  , source.contact_id
 27  , source.check_out_date
 28  , source.return_date
 29  , source.created_by
 30  , source.creation_date
 31  , source.last_updated_by
 32  , source.last_update_date);

4681 rows merged.

SQL> 
SQL> -- Count rentals after merge.
SQL> SELECT   TO_CHAR(COUNT(*), '99,999') AS "Rental after merge"
  2  FROM     rental;

Rental                                                                                             
-------                                                                                            
  4,689                                                                                            

1 row selected.

SQL> 
SQL> -- --------------------------------------------------------
SQL> --  Step #2 : Merge statement to the rental_item table.
SQL> -- --------------------------------------------------------
SQL> 
SQL> -- Count rental items before insert.
SQL> SELECT   COUNT(*)
  2  FROM     rental_item;

  COUNT(*)                                                                                         
----------                                                                                         
        13                                                                                         

1 row selected.

SQL> 
SQL> -- Merge transaction data into rental_item table.
SQL> MERGE INTO rental_item target
  2  USING ( SELECT   ri.rental_item_id
  3  	     ,	      r.rental_id
  4  	     ,	      tu.item_id
  5  	     ,	      1001 AS created_by
  6  	     ,	      TRUNC(SYSDATE) AS creation_date
  7  	     ,	      1001 AS last_updated_by
  8  	     ,	      TRUNC(SYSDATE) AS last_update_date
  9  	     ,	      cl.common_lookup_id AS rental_item_type
 10  	     ,	      r.return_date - r.check_out_date AS rental_item_price
 11  	     FROM     member m INNER JOIN contact c
 12  	     ON       m.member_id = c.member_id INNER JOIN transaction_upload tu
 13  	     ON       c.first_name = tu.first_name
 14  	     AND      NVL(c.middle_name,'x') = NVL(tu.middle_name,'x')
 15  	     AND      c.last_name = tu.last_name
 16  	     AND      tu.account_number = m.account_number LEFT JOIN rental r
 17  	     ON       c.contact_id = r.customer_id
 18  	     AND      TRUNC(tu.check_out_date) = TRUNC(r.check_out_date)
 19  	     AND      TRUNC(tu.return_date) = TRUNC(r.return_date) INNER JOIN common_lookup cl
 20  	     ON       cl.common_lookup_table = 'RENTAL_ITEM'
 21  	     AND      cl.common_lookup_column = 'RENTAL_ITEM_TYPE'
 22  	     AND      cl.common_lookup_type = tu.rental_item_type LEFT JOIN rental_item ri
 23  	     ON       r.rental_id = ri.rental_id ) source
 24  ON (target.rental_item_id = source.rental_item_id)
 25  WHEN MATCHED THEN
 26  UPDATE SET last_updated_by = source.last_updated_by
 27  ,		last_update_date = source.last_update_date
 28  WHEN NOT MATCHED THEN
 29  INSERT VALUES
 30  ( rental_item_s1.nextval
 31  , source.rental_id
 32  , source.item_id
 33  , source.created_by
 34  , source.creation_date
 35  , source.last_updated_by
 36  , source.last_update_date
 37  , source.rental_item_type
 38  , source.rental_item_price);

11520 rows merged.

SQL> 
SQL> -- Count rental items after insert.
SQL> SELECT   TO_CHAR(COUNT(*), '99,999') AS "Rental Item After Merge"
  2  FROM     rental_item;

Rental                                                                                             
-------                                                                                            
 11,533                                                                                            

1 row selected.

SQL> 
SQL> -- --------------------------------------------------------
SQL> --  Step #3 : Merge statement to the transaction table.
SQL> -- --------------------------------------------------------
SQL> 
SQL> -- Count transactions before insert
SQL> SELECT   TO_CHAR(COUNT(*), '99,999') AS "Transaction Before Merge"
  2  FROM     transaction;

Transac                                                                                            
-------                                                                                            
      0                                                                                            

1 row selected.

SQL> 
SQL> -- Merge transaction data into transaction table.
SQL> MERGE INTO transaction target
  2  USING ( SELECT   t.transaction_id
  3  	      ,        tu.payment_account_number AS transaction_account
  4  	      ,        cl1.common_lookup_id AS transaction_type
  5  	      ,        tu.transaction_date
  6  	      ,       (SUM(tu.transaction_amount) / 1.06) AS transaction_amount
  7  	      ,        r.rental_id
  8  	      ,        cl2.common_lookup_id AS payment_method_type
  9  	      ,        m.credit_card_number AS payment_account_number
 10  	      ,        1001 AS created_by
 11  	      ,        TRUNC(SYSDATE) AS creation_date
 12  	      ,        1001 AS last_updated_by
 13  	      ,        TRUNC(SYSDATE) AS last_update_date
 14  	      FROM     member m INNER JOIN contact c
 15  	      ON       m.member_id = c.member_id INNER JOIN transaction_upload tu
 16  	      ON       c.first_name = tu.first_name
 17  	      AND      NVL(c.middle_name, 'x') = NVL(tu.middle_name, 'x')
 18  	      AND      c.last_name = tu.last_name
 19  	      AND      tu.account_number = m.account_number INNER JOIN rental r
 20  	      ON       c.contact_id = r.customer_id
 21  	      AND      TRUNC(tu.check_out_date) = TRUNC(r.check_out_date)
 22  	      AND      TRUNC(tu.return_date) = TRUNC(r.return_date) INNER JOIN common_lookup cl1
 23  	      ON       cl1.common_lookup_table = 'TRANSACTION'
 24  	      AND      cl1.common_lookup_column = 'TRANSACTION_TYPE'
 25  	      AND      cl1.common_lookup_type = tu.transaction_type INNER JOIN common_lookup cl2
 26  	      ON       cl2.common_lookup_table = 'TRANSACTION'
 27  	      AND      cl2.common_lookup_column = 'PAYMENT_METHOD_TYPE'
 28  	      AND      cl2.common_lookup_type = tu.payment_method_type LEFT JOIN transaction t
 29  	      ON       t.TRANSACTION_ACCOUNT = tu.payment_account_number
 30  	      AND      t.TRANSACTION_TYPE = cl1.common_lookup_id
 31  	      AND      t.TRANSACTION_DATE = tu.transaction_date
 32  	      AND      t.TRANSACTION_AMOUNT = tu.TRANSACTION_AMOUNT
 33  	      AND      t.PAYMENT_METHOD_type = cl2.common_lookup_id
 34  	      AND      t.PAYMENT_ACCOUNT_NUMBER = tu.payment_account_number
 35  	      GROUP BY t.transaction_id
 36  	      ,        tu.payment_account_number
 37  	      ,        cl1.common_lookup_id
 38  	      ,        tu.transaction_date
 39  	      ,        r.rental_id
 40  	      ,        cl2.common_lookup_id
 41  	      ,        m.credit_card_number
 42  	      ,        1001
 43  	      ,        TRUNC(SYSDATE)
 44  	      ,        1001
 45  	      ,        TRUNC(SYSDATE) ) source
 46  ON (target.transaction_id = source.transaction_id)
 47  WHEN MATCHED THEN
 48  UPDATE SET last_updated_by = source.last_updated_by
 49  ,		last_update_date = source.last_update_date
 50  WHEN NOT MATCHED THEN
 51  INSERT VALUES
 52  ( transaction_s1.nextval
 53  , source.transaction_account
 54  , source.transaction_type
 55  , source.transaction_date
 56  , source.transaction_amount
 57  , source.rental_id
 58  , source.payment_method_type
 59  , source.payment_account_number
 60  , source.created_by
 61  , source.creation_date
 62  , source.last_updated_by
 63  , source.last_update_date);

4681 rows merged.

SQL> 
SQL> -- Count transactions after insert
SQL> SELECT   TO_CHAR(COUNT(*), '99,999') AS "Transaction after merge"
  2  FROM     transaction;

Transac                                                                                            
-------                                                                                            
  4,681                                                                                            

1 row selected.

SQL> 
SQL> -- --------------------------------------------------------
SQL> --  Step #4(a) : Put merge statements in a procedure.
SQL> -- --------------------------------------------------------
SQL> 
SQL> -- Create a procedure to wrap the transformation of import to normalized tables.
SQL> CREATE OR REPLACE PROCEDURE upload_transactions IS
  2  BEGIN
  3    -- Set save point for an all or nothing transaction.
  4    SAVEPOINT starting_point;
  5  
  6    -- Insert or update the table, which makes this rerunnable when the file hasn't been updated.
  7    MERGE INTO rental target
  8    USING ( SELECT	DISTINCT
  9  		       r.rental_id
 10  	      ,        c.contact_id
 11  	      ,        tu.check_out_date AS check_out_date
 12  	      ,        tu.return_date AS return_date
 13  	      ,        1001 AS created_by
 14  	      ,        TRUNC(SYSDATE) AS creation_date
 15  	      ,        1001 AS last_updated_by
 16  	      ,        TRUNC(SYSDATE) AS last_update_date
 17  	      FROM     member m INNER JOIN contact c
 18  	      ON       m.member_id = c.member_id INNER JOIN transaction_upload tu
 19  	      ON       c.first_name = tu.first_name
 20  	      AND      NVL(c.middle_name,'x') = NVL(tu.middle_name,'x')
 21  	      AND      c.last_name = tu.last_name LEFT JOIN rental r
 22  	      ON       c.contact_id = r.customer_id
 23  	      AND      TRUNC(tu.check_out_date) = TRUNC(r.check_out_date)
 24  	      AND      TRUNC(tu.return_date) = TRUNC(r.return_date) ) source
 25    ON (target.rental_id = source.rental_id)
 26    WHEN MATCHED THEN
 27    UPDATE SET last_updated_by = source.last_updated_by
 28    ,	  last_update_date = source.last_update_date
 29    WHEN NOT MATCHED THEN
 30    INSERT VALUES
 31    ( rental_s1.NEXTVAL
 32  , source.contact_id
 33  , source.check_out_date
 34  , source.return_date
 35  , source.created_by
 36  , source.creation_date
 37  , source.last_updated_by
 38  , source.last_update_date);
 39  
 40    -- Insert or update the table, which makes this rerunnable when the file hasn't been updated.
 41    MERGE INTO rental_item target
 42  USING ( SELECT   ri.rental_item_id
 43  	     ,	      r.rental_id
 44  	     ,	      tu.item_id
 45  	     ,	      1001 AS created_by
 46  	     ,	      TRUNC(SYSDATE) AS creation_date
 47  	     ,	      1001 AS last_updated_by
 48  	     ,	      TRUNC(SYSDATE) AS last_update_date
 49  	     ,	      cl.common_lookup_id AS rental_item_type
 50  	     ,	      r.return_date - r.check_out_date AS rental_item_price
 51  	     FROM     member m INNER JOIN contact c
 52  	     ON       m.member_id = c.member_id INNER JOIN transaction_upload tu
 53  	     ON       c.first_name = tu.first_name
 54  	     AND      NVL(c.middle_name,'x') = NVL(tu.middle_name,'x')
 55  	     AND      c.last_name = tu.last_name
 56  	     AND      tu.account_number = m.account_number LEFT JOIN rental r
 57  	     ON       c.contact_id = r.customer_id
 58  	     AND      TRUNC(tu.check_out_date) = TRUNC(r.check_out_date)
 59  	     AND      TRUNC(tu.return_date) = TRUNC(r.return_date) INNER JOIN common_lookup cl
 60  	     ON       cl.common_lookup_table = 'RENTAL_ITEM'
 61  	     AND      cl.common_lookup_column = 'RENTAL_ITEM_TYPE'
 62  	     AND      cl.common_lookup_type = tu.rental_item_type LEFT JOIN rental_item ri
 63  	     ON       r.rental_id = ri.rental_id ) source
 64  ON (target.rental_item_id = source.rental_item_id)
 65  WHEN MATCHED THEN
 66  UPDATE SET last_updated_by = source.last_updated_by
 67  ,		last_update_date = source.last_update_date
 68  WHEN NOT MATCHED THEN
 69  INSERT VALUES
 70  ( rental_item_s1.nextval
 71  , source.rental_id
 72  , source.item_id
 73  , source.created_by
 74  , source.creation_date
 75  , source.last_updated_by
 76  , source.last_update_date
 77  , source.rental_item_type
 78  , source.rental_item_price);
 79  
 80    -- Insert or update the table, which makes this rerunnable when the file hasn't been updated.
 81    MERGE INTO transaction target
 82  USING ( SELECT   t.transaction_id
 83  	      ,        tu.payment_account_number AS transaction_account
 84  	      ,        cl1.common_lookup_id AS transaction_type
 85  	      ,        tu.transaction_date
 86  	      ,       (SUM(tu.transaction_amount) / 1.06) AS transaction_amount
 87  	      ,        r.rental_id
 88  	      ,        cl2.common_lookup_id AS payment_method_type
 89  	      ,        m.credit_card_number AS payment_account_number
 90  	      ,        1001 AS created_by
 91  	      ,        TRUNC(SYSDATE) AS creation_date
 92  	      ,        1001 AS last_updated_by
 93  	      ,        TRUNC(SYSDATE) AS last_update_date
 94  	      FROM     member m INNER JOIN contact c
 95  	      ON       m.member_id = c.member_id INNER JOIN transaction_upload tu
 96  	      ON       c.first_name = tu.first_name
 97  	      AND      NVL(c.middle_name, 'x') = NVL(tu.middle_name, 'x')
 98  	      AND      c.last_name = tu.last_name
 99  	      AND      tu.account_number = m.account_number INNER JOIN rental r
100  	      ON       c.contact_id = r.customer_id
101  	      AND      TRUNC(tu.check_out_date) = TRUNC(r.check_out_date)
102  	      AND      TRUNC(tu.return_date) = TRUNC(r.return_date) INNER JOIN common_lookup cl1
103  	      ON       cl1.common_lookup_table = 'TRANSACTION'
104  	      AND      cl1.common_lookup_column = 'TRANSACTION_TYPE'
105  	      AND      cl1.common_lookup_type = tu.transaction_type INNER JOIN common_lookup cl2
106  	      ON       cl2.common_lookup_table = 'TRANSACTION'
107  	      AND      cl2.common_lookup_column = 'PAYMENT_METHOD_TYPE'
108  	      AND      cl2.common_lookup_type = tu.payment_method_type LEFT JOIN transaction t
109  	      ON       t.TRANSACTION_ACCOUNT = tu.payment_account_number
110  	      AND      t.TRANSACTION_TYPE = cl1.common_lookup_id
111  	      AND      t.TRANSACTION_DATE = tu.transaction_date
112  	      AND      t.TRANSACTION_AMOUNT = tu.TRANSACTION_AMOUNT
113  	      AND      t.PAYMENT_METHOD_type = cl2.common_lookup_id
114  	      AND      t.PAYMENT_ACCOUNT_NUMBER = tu.payment_account_number
115  	      GROUP BY t.transaction_id
116  	      ,        tu.payment_account_number
117  	      ,        cl1.common_lookup_id
118  	      ,        tu.transaction_date
119  	      ,        r.rental_id
120  	      ,        cl2.common_lookup_id
121  	      ,        m.credit_card_number
122  	      ,        1001
123  	      ,        TRUNC(SYSDATE)
124  	      ,        1001
125  	      ,        TRUNC(SYSDATE) ) source
126  ON (target.transaction_id = source.transaction_id)
127  WHEN MATCHED THEN
128  UPDATE SET last_updated_by = source.last_updated_by
129  ,		last_update_date = source.last_update_date
130  WHEN NOT MATCHED THEN
131  INSERT VALUES
132  ( transaction_s1.nextval
133  , source.transaction_account
134  , source.transaction_type
135  , source.transaction_date
136  , source.transaction_amount
137  , source.rental_id
138  , source.payment_method_type
139  , source.payment_account_number
140  , source.created_by
141  , source.creation_date
142  , source.last_updated_by
143  , source.last_update_date);
144  
145    -- Save the changes.
146    COMMIT;
147  
148  EXCEPTION
149    WHEN OTHERS THEN
150  	 ROLLBACK TO starting_point;
151  	 RETURN;
152  END;
153  /

Procedure created.

SQL> 
SQL> -- Show errors if any.
SQL> -- SHOW ERRORS
SQL> 
SQL> -- --------------------------------------------------------
SQL> --  Step #4(b) : Execute the procedure for the first time.
SQL> -- --------------------------------------------------------
SQL> 
SQL> -- Verify and execute procedure.
SQL> COLUMN rental_count      FORMAT 99,999 HEADING "Rental|Count"
SQL> COLUMN rental_item_count FORMAT 99,999 HEADING "Rental|Item|Count"
SQL> COLUMN transaction_count FORMAT 99,999 HEADING "Transaction|Count"
SQL> 
SQL> -- Query for initial counts, should return:
SQL> -- ----------------------------------------------
SQL> -- 	 Rental
SQL> --  Rental    Item Transaction
SQL> --   Count   Count       Count
SQL> -- ------- ------- -----------
SQL> --       8      12 	  0
SQL> -- ----------------------------------------------
SQL> SELECT   il1.rental_count
  2  ,	      il2.rental_item_count
  3  ,	      il3.transaction_count
  4  FROM    (SELECT COUNT(*) AS rental_count FROM rental) il1 CROSS JOIN
  5  	     (SELECT COUNT(*) AS rental_item_count FROM rental_item) il2 CROSS JOIN
  6  	     (SELECT COUNT(*) AS transaction_count FROM transaction) il3;

         Rental                                                                                    
 Rental    Item Transaction                                                                        
  Count   Count       Count                                                                        
------- ------- -----------                                                                        
  4,689  11,533       4,681                                                                        

1 row selected.

SQL> 
SQL> -- Transform import source into normalized tables.
SQL> EXECUTE upload_transactions;

PL/SQL procedure successfully completed.

SQL> 
SQL> -- --------------------------------------------------------
SQL> --  Step #4(c) : Verify first merge statements results.
SQL> -- --------------------------------------------------------
SQL> 
SQL> -- Requery to see completed counts, should return:
SQL> -- ----------------------------------------------
SQL> -- 	 Rental
SQL> --  Rental    Item Transaction
SQL> --   Count   Count       Count
SQL> -- ------- ------- -----------
SQL> --   4,689  11,532       4,681
SQL> -- ----------------------------------------------
SQL> SELECT   il1.rental_count
  2  ,	      il2.rental_item_count
  3  ,	      il3.transaction_count
  4  FROM    (SELECT COUNT(*) AS rental_count FROM rental) il1 CROSS JOIN
  5  	     (SELECT COUNT(*) AS rental_item_count FROM rental_item) il2 CROSS JOIN
  6  	     (SELECT COUNT(*) AS transaction_count FROM transaction) il3;

         Rental                                                                                    
 Rental    Item Transaction                                                                        
  Count   Count       Count                                                                        
------- ------- -----------                                                                        
  4,689  11,533       4,681                                                                        

1 row selected.

SQL> 
SQL> -- --------------------------------------------------------
SQL> --  Step #4(d) : Execute the procedure for the second time.
SQL> -- --------------------------------------------------------
SQL> 
SQL> -- Transform import source into normalized tables.
SQL> EXECUTE upload_transactions;

PL/SQL procedure successfully completed.

SQL> 
SQL> -- --------------------------------------------------------
SQL> --  Step #4(e) : Verify second merge statements results.
SQL> -- --------------------------------------------------------
SQL> 
SQL> -- Requery to see completed counts, should return:
SQL> -- ----------------------------------------------
SQL> -- 	 Rental
SQL> --  Rental    Item Transaction
SQL> --   Count   Count       Count
SQL> -- ------- ------- -----------
SQL> --   4,689  11,532       4,681
SQL> -- ----------------------------------------------
SQL> 
SQL> SELECT   il1.rental_count
  2  ,	      il2.rental_item_count
  3  ,	      il3.transaction_count
  4  FROM    (SELECT COUNT(*) AS rental_count FROM rental) il1 CROSS JOIN
  5  	     (SELECT COUNT(*) AS rental_item_count FROM rental_item) il2 CROSS JOIN
  6  	     (SELECT COUNT(*) AS transaction_count FROM transaction) il3;

         Rental                                                                                    
 Rental    Item Transaction                                                                        
  Count   Count       Count                                                                        
------- ------- -----------                                                                        
  4,689  11,533       4,681                                                                        

1 row selected.

SQL> 
SQL> -- --------------------------------------------------------
SQL> --  Step #5 : Demonstrate aggregation with sorting options.
SQL> -- --------------------------------------------------------
SQL> -- Expand line length in environment.
SQL> SET LINESIZE 150
SQL> COLUMN month	       FORMAT A15 HEADING "MONTH"
SQL> COLUMN base_revenue       FORMAT A15 HEADING "BASE_REVENUE"
SQL> COLUMN ten_plus	       FORMAT A15 HEADING "10_PLUS"
SQL> COLUMN twenty_plus        FORMAT A15 HEADING "20_PLUS"
SQL> COLUMN ten_plus_less_b    FORMAT A15 HEADING "10_PLUS_LESS_B"
SQL> COLUMN twenty_plus_less_b FORMAT A15 HEADING "20_PLUS_LESS_B"
SQL> 
SQL> 
SQL> -- Query, aggregate, and sort data.
SQL> -- Query for initial counts, should return:
SQL> -- --------------------------------------------------------------------------------------------
SQL> -- MONTH	   BASE_REVENUE   10_PLUS	 20_PLUS	10_PLUS_LESS_B 20_PLUS_LESS_B
SQL> -- ---------- -------------- -------------- -------------- -------------- --------------
SQL> -- JAN-2009	$2,671.20      $2,938.32      $3,205.44        $267.12	      $534.24
SQL> -- FEB-2009	$4,270.74      $4,697.81      $5,124.89        $427.07	      $854.15
SQL> -- MAR-2009	$5,371.02      $5,908.12      $6,445.22        $537.10	    $1,074.20
SQL> -- APR-2009	$4,932.18      $5,425.40      $5,918.62        $493.22	      $986.44
SQL> -- MAY-2009	$2,216.46      $2,438.11      $2,659.75        $221.65	      $443.29
SQL> -- JUN-2009	$1,208.40      $1,329.24      $1,450.08        $120.84	      $241.68
SQL> -- JUL-2009	$2,404.08      $2,644.49      $2,884.90        $240.41	      $480.82
SQL> -- AUG-2009	$2,241.90      $2,466.09      $2,690.28        $224.19	      $448.38
SQL> -- SEP-2009	$2,197.38      $2,417.12      $2,636.86        $219.74	      $439.48
SQL> -- OCT-2009	$3,275.40      $3,602.94      $3,930.48        $327.54	      $655.08
SQL> -- NOV-2009	$3,125.94      $3,438.53      $3,751.13        $312.59	      $625.19
SQL> -- DEC-2009	$2,340.48      $2,574.53      $2,808.58        $234.05	      $468.10
SQL> -- --------------------------------------------------------------------------------------------
SQL> 
SQL> SELECT
  2    ts.month
  3  , ts.base_revenue
  4  , ts.ten_plus
  5  , ts.twenty_plus
  6  , ts.ten_plus_less_b
  7  , ts.twenty_plus_less_b
  8  FROM ( SELECT
  9  	     CONCAT(TO_CHAR(t.transaction_date, 'MON'), CONCAT('-', EXTRACT(YEAR FROM t.transaction_date))) AS month
 10  	       , TO_CHAR(SUM(t.transaction_amount), '$9,999,999.00') AS base_revenue
 11  	       , TO_CHAR(SUM(t.transaction_amount) * 1.1, '$9,999,999.00') AS ten_plus
 12  	       , TO_CHAR(SUM(t.transaction_amount) * 1.2, '$9,999,999.00') AS twenty_plus
 13  	       , TO_CHAR(SUM(t.transaction_amount) * 0.1, '$9,999,999.00') AS ten_plus_less_b
 14  	       , TO_CHAR(SUM(t.transaction_amount) * 0.2, '$9,999,999.00') AS twenty_plus_less_b
 15  	       , EXTRACT(MONTH FROM t.transaction_date) AS sKey
 16  	       FROM transaction t
 17  	       WHERE EXTRACT(YEAR FROM t.transaction_date) = 2009
 18  	       GROUP BY CONCAT(TO_CHAR(t.transaction_date, 'MON'), CONCAT('-', EXTRACT(YEAR FROM t.transaction_date)))
 19  	       ,  EXTRACT(MONTH FROM t.transaction_date)
 20  	       ) ts
 21  ORDER BY ts.sKey;

MONTH           BASE_REVENUE    10_PLUS         20_PLUS         10_PLUS_LESS_B  20_PLUS_LESS_B                                                        
--------------- --------------- --------------- --------------- --------------- ---------------                                                       
JAN-2009             $2,520.00       $2,772.00       $3,024.00         $252.00         $504.00                                                        
FEB-2009             $4,029.00       $4,431.90       $4,834.80         $402.90         $805.80                                                        
MAR-2009             $5,067.00       $5,573.70       $6,080.40         $506.70       $1,013.40                                                        
APR-2009             $4,653.00       $5,118.30       $5,583.60         $465.30         $930.60                                                        
MAY-2009             $2,091.00       $2,300.10       $2,509.20         $209.10         $418.20                                                        
JUN-2009             $1,140.00       $1,254.00       $1,368.00         $114.00         $228.00                                                        
JUL-2009             $2,268.00       $2,494.80       $2,721.60         $226.80         $453.60                                                        
AUG-2009             $2,115.00       $2,326.50       $2,538.00         $211.50         $423.00                                                        
SEP-2009             $2,073.00       $2,280.30       $2,487.60         $207.30         $414.60                                                        
OCT-2009             $3,090.00       $3,399.00       $3,708.00         $309.00         $618.00                                                        
NOV-2009             $2,949.00       $3,243.90       $3,538.80         $294.90         $589.80                                                        
DEC-2009             $2,208.00       $2,428.80       $2,649.60         $220.80         $441.60                                                        

12 rows selected.

SQL> 
SQL> SPOOL OFF
